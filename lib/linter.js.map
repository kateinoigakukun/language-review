{"version":3,"file":"linter.js","sourceRoot":"","sources":["linter.ts"],"names":["linter","reportToLintMessage","syntaxTreeToRange"],"mappings":"AAEA,qBAAoB,MAAM,CAAC,CAAA;AAG3B,IAAY,MAAM,WAAM,WAAW,CAAC,CAAA;AACpC,8BAAyB,sBAAsB,CAAC,CAAA;AAChD,IAAY,MAAM,WAAM,eAAe,CAAC,CAAA;AAWxC,gBAA+B,MAAwB;IACnDA,MAAMA,CAACA,IAAIA,OAAOA,CAACA,UAACA,OAAOA,EAAEA,MAAMA;QAC/BA,IAAIA,YAAYA,GAAGA,IAAIA,uBAAYA,CAACA,EAAEA,MAAMA,EAAEA,MAAMA,EAAEA,CAACA,CAACA;QACxDA,YAAYA,CAACA,EAAEA,CAACA,QAAQA,EAAEA,UAAAA,OAAOA;YAC7BA,MAAMA,CAACA,GAAGA,CAACA,qCAAqCA,CAACA,CAACA;YAClDA,OAAOA,CAACA,mBAAmBA,CAACA,MAAMA,EAAEA,OAAOA,CAACA,CAACA,CAACA;QAClDA,CAACA,CAACA,CAACA;QACHA,YAAYA,CAACA,aAAaA,EAAEA,CAACA;IACjCA,CAACA,CAACA,CAACA;AACPA,CAACA;AATD;wBASC,CAAA;AAED,6BAA6B,MAAwB,EAAE,OAA+B;IAClFC,MAAMA,CAACA,OAAOA;SACTA,MAAMA,CAACA,UAAAA,MAAMA,IAAIA,OAAAA,MAAMA,CAACA,KAAKA,KAAKA,MAAMA,CAACA,WAAWA,CAACA,IAAIA,EAAxCA,CAAwCA,CAACA;SAC1DA,GAAGA,CAACA,UAACA,MAAMA;QACRA,IAAIA,IAAYA,CAACA;QACjBA,MAAMA,CAACA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA;YACnBA,KAAKA,MAAMA,CAACA,WAAWA,CAACA,KAAKA;gBACzBA,IAAIA,GAAGA,OAAOA,CAACA;gBACfA,KAAKA,CAACA;YACVA,KAAKA,MAAMA,CAACA,WAAWA,CAACA,OAAOA;gBAC3BA,IAAIA,GAAGA,SAASA,CAACA;gBACjBA,KAAKA,CAACA;QACdA,CAACA;QAEDA,IAAIA,KAAKA,GAAGA,iBAAiBA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA;QAC/CA,MAAMA,CAACA;YACHA,IAAIA,EAAEA,IAAIA;YACVA,IAAIA,EAAEA,MAAMA,CAACA,OAAOA;YACpBA,QAAQA,EAAEA,MAAMA,CAACA,OAAOA,EAAEA;YAC1BA,KAAKA,EAAEA,KAAKA;SACfA,CAACA;IACNA,CAACA,CAACA,CAACA;AACXA,CAACA;AAED,2BAA2B,IAAyB;IAChDC,MAAMA,CAACA,YAAKA,CAACA,UAAUA,CAACA;QACpBA,KAAKA,EAAEA;YACHA,GAAGA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,GAAGA,CAACA;YACjCA,MAAMA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA;SACzCA;QACDA,GAAGA,EAAEA;YACDA,GAAGA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,GAAGA,CAACA;YACjCA,MAAMA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,GAAGA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,GAAGA,CAACA,MAAMA,GAAGA,CAACA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA;SAC5FA;KACJA,CAACA,CAACA;AACPA,CAACA","sourcesContent":["import * as fs from \"fs\";\n\nimport {Range} from \"atom\";\n\nimport * as V from \"./util/const\";\nimport * as ReVIEW from \"review.js\";\nimport ReVIEWRunner from \"./util/review-runner\";\nimport * as logger from \"./util/logger\";\n\ninterface LinterError {\n    type: string;\n    text?: string;\n    html?: string;\n    filePath?: string;\n    range?: TextBuffer.IRange;\n    trace?: {}[];\n}\n\nexport default function linter(editor: AtomCore.IEditor): Promise<LinterError[]> {\n    return new Promise((resolve, reject) => {\n        let reviewRunner = new ReVIEWRunner({ editor: editor });\n        reviewRunner.on(\"report\", reports=> {\n            logger.log(\"Re:VIEW linter ReVIEWRunner compile\");\n            resolve(reportToLintMessage(editor, reports));\n        });\n        reviewRunner.startWatching();\n    });\n}\n\nfunction reportToLintMessage(editor: AtomCore.IEditor, reports: ReVIEW.ProcessReport[]): LinterError[] {\n    return reports\n        .filter(report => report.level !== ReVIEW.ReportLevel.Info)\n        .map((report): LinterError => {\n            let type: string;\n            switch (report.level) {\n                case ReVIEW.ReportLevel.Error:\n                    type = \"Error\";\n                    break;\n                case ReVIEW.ReportLevel.Warning:\n                    type = \"Warning\";\n                    break;\n            }\n\n            let range = syntaxTreeToRange(report.nodes[0]);\n            return {\n                type: type,\n                text: report.message,\n                filePath: editor.getPath(),\n                range: range\n            };\n        });\n}\n\nfunction syntaxTreeToRange(node: ReVIEW.NodeLocation): TextBuffer.IRange {\n    return Range.fromObject({\n        start: {\n            row: node.location.start.line - 1,\n            column: node.location.start.column - 1\n        },\n        end: {\n            row: node.location.start.line - 1,\n            column: node.location.end ? node.location.end.column - 1 : node.location.start.column - 1\n        }\n    });\n}\n"]}