{"version":3,"file":"emissary-helper.js","sourceRoot":"","sources":["emissary-helper.ts"],"names":[],"mappings":"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","sourcesContent":["// このファイルについて\n// emissary.Emitter.includeInto などでprototypeにメソッドを生やせる\n// しかし、TypeScriptで同じことをやっても型的に解決できない。mixinほしい。\n// そのため、インタフェースを継承し、実装を与えるが実装を削除するようにする。\n// この処理を必要な箇所全てでやるとアホみたいに可読性落ちるのでこのクラスに集約する。\n\nimport * as emissary from \"emissary\";\n\nexport default class EmitterSubscriberBase implements Emissary.IEmitter, Emissary.ISubscriber {\n\n    static emissarified() {\n        delete this.prototype.on;\n        delete this.prototype.once;\n        delete this.prototype.signal;\n        delete this.prototype.behavior;\n        delete this.prototype.emit;\n        delete this.prototype.off;\n        delete this.prototype.pauseEvents;\n        delete this.prototype.resumeEvents;\n        delete this.prototype.incrementSubscriptionCount;\n        delete this.prototype.decrementSubscriptionCount;\n        delete this.prototype.getSubscriptionCount;\n        delete this.prototype.hasSubscriptions;\n        delete this.prototype.subscribeWith;\n        delete this.prototype.addSubscription;\n        delete this.prototype.subscribe;\n        delete this.prototype.subscribeToCommand;\n        delete this.prototype.unsubscribe;\n        emissary.Emitter.includeInto(this);\n        emissary.Subscriber.includeInto(this);\n    }\n\n    // overwrite by emissary.Emitter.includeInto(ReVIEWRunner);\n    on(eventNames: string, handler: Function): any /* return value type are Signal */ {\n        throw new Error();\n    }\n\n    once(eventName: string, handler: Function): any /* return value type are Signal */ {\n        throw new Error();\n    }\n\n    signal(eventName: string): void {\n        throw new Error();\n    }\n\n    behavior(eventName: string, initialValue: any): void {\n        throw new Error();\n    }\n\n    emit(eventName: string, ...args: any[]): void {\n        throw new Error();\n    }\n\n    off(eventNames: string, handler: Function): void {\n        throw new Error();\n    }\n\n    pauseEvents(eventNames: string): void {\n        throw new Error();\n    }\n\n    resumeEvents(eventNames: string): void {\n        throw new Error();\n    }\n\n    incrementSubscriptionCount(eventName: string): number {\n        throw new Error();\n    }\n\n    decrementSubscriptionCount(eventName: string): number {\n        throw new Error();\n    }\n\n    getSubscriptionCount(eventName: string): number {\n        throw new Error();\n    }\n\n    hasSubscriptions(eventName: string): boolean {\n        throw new Error();\n    }\n\n    // overwrite by emissary.Subscriber.includeInto(ReVIEWRunner);\n    subscribeWith(eventEmitter: any, methodName: string, args: any): Emissary.ISubscription {\n        throw new Error();\n    }\n\n    addSubscription(subscription: any): Emissary.ISubscription {\n        throw new Error();\n    }\n\n    subscribe(eventEmitterOrSubscription: any, ...args: any[]): Emissary.ISubscription {\n        throw new Error();\n    }\n\n    subscribeToCommand(eventEmitter: any, ...args: any[]): Emissary.ISubscription {\n        throw new Error();\n    }\n\n    unsubscribe(object?: any): any {\n        throw new Error();\n    }\n}\n\nEmitterSubscriberBase.emissarified();\n"]}